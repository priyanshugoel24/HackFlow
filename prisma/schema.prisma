generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  image            String?
  emailVerified    DateTime?
  lastSeenat       DateTime?
  accounts         Account[]
  activities       Activity[]
  comments         Comment[]       @relation("UserComments")
  assignedCards    ContextCard[]   @relation("AssignedCards")
  contextCards     ContextCard[]   @relation("CreatedCards")
  createdProjects  Project[]       @relation("CreatedProjects")
  addedMembers     ProjectMember[] @relation("UserAddedMembers")
  memberships      ProjectMember[]
  sessions         Session[]
  status           Status?
  createdTeams     Team[]          @relation("CreatedTeams")
  addedTeamMembers TeamMember[]    @relation("UserAddedTeamMembers")
  teamMemberships  TeamMember[]
}

model Team {
  id                   String       @id @default(cuid())
  name                 String
  slug                 String       @unique
  description          String?
  createdAt            DateTime     @default(now())
  createdById          String
  lastActivityAt       DateTime     @updatedAt
  isArchived           Boolean      @default(false)
  hackathonDeadline    DateTime?
  hackathonModeEnabled Boolean      @default(false)
  projects             Project[]
  createdBy            User         @relation("CreatedTeams", fields: [createdById], references: [id], onDelete: Cascade)
  members              TeamMember[]
}

model TeamMember {
  id        String       @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime     @default(now())
  addedById String?
  addedBy   User?        @relation("UserAddedTeamMembers", fields: [addedById], references: [id])
  team      Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Project {
  id             String          @id @default(cuid())
  name           String
  link           String?
  createdAt      DateTime        @default(now())
  createdById    String
  description    String?
  isArchived     Boolean         @default(false)
  lastActivityAt DateTime        @updatedAt
  tags           String[]
  slug           String          @unique
  teamId         String?
  activities           Activity[]
  contextCards         ContextCard[]
  createdBy            User            @relation("CreatedProjects", fields: [createdById], references: [id], onDelete: Cascade)
  team                 Team?           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  members              ProjectMember[]

  @@index([teamId])
}

model ProjectMember {
  id        String       @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime     @default(now())
  addedById String?
  addedBy   User?        @relation("UserAddedMembers", fields: [addedById], references: [id])
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model ContextCard {
  id           String        @id @default(cuid())
  title        String
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isPinned     Boolean       @default(false)
  userId       String
  projectId    String
  attachments  String[]      @default([])
  isArchived   Boolean       @default(false)
  issues       String?
  linkedCardId String?
  slackLinks   String[]
  type         CardType      @default(TASK)
  visibility   Visibility    @default(PRIVATE)
  why          String?
  status       TaskStatus?   @default(ACTIVE)
  assignedToId String?
  summary      String?
  comments     Comment[]     @relation("CardComments")
  assignedTo   User?         @relation("AssignedCards", fields: [assignedToId], references: [id])
  linkedCard   ContextCard?  @relation("LinkedCards", fields: [linkedCardId], references: [id])
  linkedFrom   ContextCard[] @relation("LinkedCards")
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User          @relation("CreatedCards", fields: [userId], references: [id], onDelete: Cascade)

  @@index([assignedToId])
  @@index([projectId])
}

model Status {
  id        String   @id @default(cuid())
  userId    String   @unique
  updatedAt DateTime @updatedAt
  state     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  createdAt   DateTime @default(now())
  userId      String?
  projectId   String
  description String
  metadata    Json?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])
}

model Comment {
  id        String      @id @default(cuid())
  cardId    String
  authorId  String
  content   String
  parentId  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  author    User        @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  card      ContextCard @relation("CardComments", fields: [cardId], references: [id], onDelete: Cascade)
  parent    Comment?    @relation("ThreadedComments", fields: [parentId], references: [id])
  children  Comment[]   @relation("ThreadedComments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectRole {
  MANAGER
  MEMBER
}

enum MemberStatus {
  INVITED
  ACTIVE
}

enum CardType {
  TASK
  INSIGHT
  DECISION
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum TaskStatus {
  ACTIVE
  CLOSED
}
